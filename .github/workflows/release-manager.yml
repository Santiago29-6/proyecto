name: Auto Release Manager

on:
  pull_request:
    types: [closed]
    branches:
      - main
  push:
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: Versioning and Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para tags y branches

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Validate PR title and extract change type
        id: pr
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          echo "📌 PR title: $TITLE"
          
          # Validar formato: 000 (tipo): descripción
          if [[ ! "$TITLE" =~ ^[0-9]{3}\ \((feat|fix|refactor|test|hotfix)\):\ .+ ]]; then
            echo "❌ ERROR: PR title format is invalid."
            echo "Expected format: '000 (feat|fix|refactor|test|hotfix): Description'"
            exit 1
          fi
          
          # Extraer tipo de cambio
          TYPE=$(echo "$TITLE" | sed -nE 's/^[0-9]{3} \(([^)]+)\):.*/\1/p')
          echo "🔍 Detected type: $TYPE"
          
          # Determinar tipo de versión (minor para features, patch para fixes)
          if echo "$TYPE" | grep -Eiq "^(feat|refactor|test)$"; then
            echo "CHANGE_TYPE=minor" >> "$GITHUB_OUTPUT"
          elif echo "$TYPE" | grep -Eiq "^(fix|hotfix)$"; then
            echo "CHANGE_TYPE=patch" >> "$GITHUB_OUTPUT"
          else
            echo "CHANGE_TYPE=none" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop if not a release-related PR
        if: steps.pr.outputs.CHANGE_TYPE == 'none'
        run: |
          echo "ℹ️ PR is not related to a release. Skipping workflow."
          exit 0

      - name: Get current version from pom.xml
        id: version
        if: steps.pr.outputs.CHANGE_TYPE != 'none'
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-SNAPSHOT//')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          echo "BASE_VERSION=$BASE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Calculate new versions
        id: next
        if: steps.pr.outputs.CHANGE_TYPE != 'none'
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ steps.version.outputs.BASE_VERSION }}"
          TYPE="${{ steps.pr.outputs.CHANGE_TYPE }}"
          
          if [ "$TYPE" = "minor" ]; then
            # Feature/Refactor/Test → Incrementa minor (0.5.0 → 0.6.0-SNAPSHOT)
            RELEASE_VERSION="$MAJOR.$MINOR.0"
            NEXT_VERSION="$MAJOR.$((MINOR + 1)).0-SNAPSHOT"
          else
            # Fix/Hotfix → Incrementa patch (0.5.0 → 0.5.1-SNAPSHOT)
            RELEASE_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-SNAPSHOT"
          fi
          
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "NEXT_VERSION=$NEXT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Debug versions
        run: |
          echo "📌 Current version: ${{ steps.version.outputs.CURRENT_VERSION }}"
          echo "📦 Release version: ${{ steps.next.outputs.RELEASE_VERSION }}"
          echo "🔧 Next main version: ${{ steps.next.outputs.NEXT_VERSION }}"

      - name: Create release branch and tag
        if: steps.pr.outputs.CHANGE_TYPE != 'none'
        run: |
          # Crear rama release/x.y.z
          git checkout -b release/${{ steps.next.outputs.RELEASE_VERSION }}
          git push origin release/${{ steps.next.outputs.RELEASE_VERSION }}
          
          # Crear tag x.y.z
          git tag ${{ steps.next.outputs.RELEASE_VERSION }}
          git push origin ${{ steps.next.outputs.RELEASE_VERSION }}

      - name: Update version in main
        if: steps.pr.outputs.CHANGE_TYPE != 'none'
        run: |
          git checkout main
          
          # Actualizar pom.xml con la nueva versión SNAPSHOT
          mvn versions:set -DnewVersion=${{ steps.next.outputs.NEXT_VERSION }} -DgenerateBackupPoms=false
          
          # Commit y push
          git add pom.xml
          git commit -m "chore: bump version to ${{ steps.next.outputs.NEXT_VERSION }} [skip ci]"
          git push origin main